import {Alert, Linking, Platform} from 'react-native';
import messaging, {
  getMessaging,
  getToken,
  onTokenRefresh,
} from '@react-native-firebase/messaging';
import notifee, {
  AndroidImportance,
  AuthorizationStatus,
} from '@notifee/react-native';
import axiosClient from '../apis/axios';
import {getApp} from '@react-native-firebase/app';
import AsyncStorage from '@react-native-async-storage/async-storage';
import crashlytics from "@react-native-firebase/crashlytics";
import {logCriticalError, logInfo} from "../utils/errorHandler";

const addTokenDrive = async (fcmToken: string) => {
  try {
    const storedToken = await AsyncStorage.getItem('fcmToken');
    if (storedToken === fcmToken) {
      return;
    }
    await axiosClient.post('/users/saveToken', {fcmToken});
    await AsyncStorage.setItem('fcmToken', fcmToken);
    logInfo('addTokenDrive');
  } catch (error) {
    logCriticalError('addTokenDrive', error);
    console.log('c√≥ l·ªói x·∫©y ra khi l∆∞u token',error);
  }
};

export async function requestNotifyPermissionWithConfirm(t: any) {
  try {
    // B1: Xin quy·ªÅn th√¥ng b√°o
    const settings = await notifee.requestPermission();

    let isGranted =
      settings.authorizationStatus === AuthorizationStatus.AUTHORIZED ||
      settings.authorizationStatus === AuthorizationStatus.PROVISIONAL;

    // B2: N·∫øu b·ªã t·ª´ ch·ªëi ‚Üí h·ªèi l·∫°i
    if (!isGranted) {
      const userConfirmed = await new Promise<boolean>(resolve => {
        Alert.alert(
          t('granted.notification_request_title'),
          t('granted.notification_request_message'),
          [
            {
              text: t('granted.no'),
              onPress: () => resolve(false),
              style: 'cancel',
            },
            {text: t('granted.yes'), onPress: () => resolve(true)},
          ],
        );
      });

      if (!userConfirmed) {
        console.log('üö´ Ng∆∞·ªùi d√πng t·ª´ ch·ªëi x√°c nh·∫≠n l·∫°i.');
        logInfo('Ng∆∞·ªùi d√πng t·ª´ ch·ªëi x√°c nh·∫≠n l·∫°i.');

        return null;
      }

      // B3: G·ªçi l·∫°i requestPermission sau khi ng∆∞·ªùi d√πng ƒë·ªìng √Ω
      const retrySettings = await notifee.requestPermission();

      isGranted =
        retrySettings.authorizationStatus === AuthorizationStatus.AUTHORIZED ||
        retrySettings.authorizationStatus === AuthorizationStatus.PROVISIONAL;

      // N·∫øu v·∫´n kh√¥ng ƒë∆∞·ª£c c·∫•p quy·ªÅn ‚Üí ƒë·ªÅ ngh·ªã m·ªü c√†i ƒë·∫∑t
      if (!isGranted) {
        console.log('‚ùå Ng∆∞·ªùi d√πng v·∫´n kh√¥ng c·∫•p quy·ªÅn sau l·∫ßn th·ª≠ l·∫°i.');
        logInfo('Ng∆∞·ªùi d√πng v·∫´n kh√¥ng c·∫•p quy·ªÅn th√¥ng b√°o sau l·∫ßn th·ª≠ l·∫°i.');
        Alert.alert(
          t('granted.notification_blocked_title'),
          t('granted.notification_blocked_message'),
          [
            {text: t('granted.later'), style: 'cancel'},
            {
              text: t('granted.OpenSetting'),
              onPress: () => {
                if (Platform.OS === 'ios') {
                  Linking.openURL('app-settings:');
                } else {
                  Linking.openSettings();
                }
              },
            },
          ],
        );

        return null;
      }
    }

    const app = getApp(); // l·∫•y app m·∫∑c ƒë·ªãnh
    const messaging = getMessaging(app); // kh·ªüi t·∫°o messaging modular

    const token = await getToken(messaging);
    console.log('üì≤ FCM Token:', token);

    // G·ª≠i token l√™n server t·∫°i ƒë√¢y n·∫øu c·∫ßn
    await addTokenDrive(token);
    // Theo d√µi token m·ªõi n·∫øu Firebase l√†m m·ªõi
    onTokenRefresh(messaging, async newToken => {
      console.log('üîÅ Token m·ªõi:', newToken);
      await addTokenDrive(newToken);
    });

    return token;
  } catch (error ) {
    console.log('L·ªói khi xin quy·ªÅn th√¥ng b√°o:', error);
    logCriticalError('requestNotifyPermissionWithConfirm', error);
    return null;
  }
}
